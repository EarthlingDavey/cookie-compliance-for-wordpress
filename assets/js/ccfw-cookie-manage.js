/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/ccfw-cookie-manage.js":
/*!**************************************!*\
  !*** ./src/js/ccfw-cookie-manage.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ccfw_gtm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ccfw-gtm */ \"./src/js/ccfw-gtm.js\");\n\nvar ccfwGtmRunning = (0,_ccfw_gtm__WEBPACK_IMPORTED_MODULE_0__.ccfwGTM)();\n\n(function ($) {\n  $(function ($) {\n    if (ccfwGtmRunning) {\n      // cache all available allowlist identifiers\n      $('.ccfw-banner__toggle-slider').each(function (key, element) {\n        _ccfw_gtm__WEBPACK_IMPORTED_MODULE_0__.CCFW.allowedIds.push($(element).data('allowlist'));\n      }); // setup a listener on each toggle button\n\n      $('.' + _ccfw_gtm__WEBPACK_IMPORTED_MODULE_0__.CCFW.selector.toggles).on('click', _ccfw_gtm__WEBPACK_IMPORTED_MODULE_0__.togglesChange); // clearStorage; performs clear if 1 year has past since the user first set their choices.\n\n      _ccfw_gtm__WEBPACK_IMPORTED_MODULE_0__.CCFW.clearStorage();\n    }\n  });\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb29raWUtY29tcGxpYW5jZS1mb3Itd29yZHByZXNzLy4vc3JjL2pzL2NjZnctY29va2llLW1hbmFnZS5qcz9mNjRjIl0sIm5hbWVzIjpbImNjZndHdG1SdW5uaW5nIiwiY2Nmd0dUTSIsIiQiLCJlYWNoIiwia2V5IiwiZWxlbWVudCIsIkNDRlciLCJkYXRhIiwib24iLCJ0b2dnbGVzQ2hhbmdlIiwialF1ZXJ5Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBRUEsSUFBTUEsY0FBYyxHQUFHQyxrREFBTyxFQUE5Qjs7QUFFQSxDQUFDLFVBQVVDLENBQVYsRUFBYTtBQUNWQSxHQUFDLENBQUMsVUFBVUEsQ0FBVixFQUFhO0FBQ1gsUUFBSUYsY0FBSixFQUFvQjtBQUNoQjtBQUNBRSxPQUFDLENBQUMsNkJBQUQsQ0FBRCxDQUFpQ0MsSUFBakMsQ0FBc0MsVUFBVUMsR0FBVixFQUFlQyxPQUFmLEVBQXdCO0FBQzFEQyxtRUFBQSxDQUFxQkosQ0FBQyxDQUFDRyxPQUFELENBQUQsQ0FBV0UsSUFBWCxDQUFnQixXQUFoQixDQUFyQjtBQUNILE9BRkQsRUFGZ0IsQ0FNaEI7O0FBQ0FMLE9BQUMsQ0FBQyxNQUFNSSw0REFBUCxDQUFELENBQStCRSxFQUEvQixDQUFrQyxPQUFsQyxFQUEyQ0Msb0RBQTNDLEVBUGdCLENBU2hCOztBQUNBSCw4REFBQTtBQUNIO0FBQ0osR0FiQSxDQUFEO0FBY0gsQ0FmRCxFQWVHSSxNQWZIIiwiZmlsZSI6Ii4vc3JjL2pzL2NjZnctY29va2llLW1hbmFnZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENDRlcsIGNjZndHVE0sIHRvZ2dsZXNDaGFuZ2UgfSBmcm9tICcuL2NjZnctZ3RtJztcblxuY29uc3QgY2Nmd0d0bVJ1bm5pbmcgPSBjY2Z3R1RNKCk7XG5cbihmdW5jdGlvbiAoJCkge1xuICAgICQoZnVuY3Rpb24gKCQpIHtcbiAgICAgICAgaWYgKGNjZndHdG1SdW5uaW5nKSB7XG4gICAgICAgICAgICAvLyBjYWNoZSBhbGwgYXZhaWxhYmxlIGFsbG93bGlzdCBpZGVudGlmaWVyc1xuICAgICAgICAgICAgJCgnLmNjZnctYmFubmVyX190b2dnbGUtc2xpZGVyJykuZWFjaChmdW5jdGlvbiAoa2V5LCBlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgQ0NGVy5hbGxvd2VkSWRzLnB1c2goJChlbGVtZW50KS5kYXRhKCdhbGxvd2xpc3QnKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gc2V0dXAgYSBsaXN0ZW5lciBvbiBlYWNoIHRvZ2dsZSBidXR0b25cbiAgICAgICAgICAgICQoJy4nICsgQ0NGVy5zZWxlY3Rvci50b2dnbGVzKS5vbignY2xpY2snLCB0b2dnbGVzQ2hhbmdlKTtcblxuICAgICAgICAgICAgLy8gY2xlYXJTdG9yYWdlOyBwZXJmb3JtcyBjbGVhciBpZiAxIHllYXIgaGFzIHBhc3Qgc2luY2UgdGhlIHVzZXIgZmlyc3Qgc2V0IHRoZWlyIGNob2ljZXMuXG4gICAgICAgICAgICBDQ0ZXLmNsZWFyU3RvcmFnZSgpO1xuICAgICAgICB9XG4gICAgfSk7XG59KShqUXVlcnkpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/ccfw-cookie-manage.js\n");

/***/ }),

/***/ "./src/js/ccfw-gtm.js":
/*!****************************!*\
  !*** ./src/js/ccfw-gtm.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CCFW\": () => (/* binding */ CCFW),\n/* harmony export */   \"ccfwGTM\": () => (/* binding */ ccfwGTM),\n/* harmony export */   \"togglesChange\": () => (/* binding */ togglesChange)\n/* harmony export */ });\n/**\n * A dataLayer management script for GTM\n *\n * First step; define some settings\n */\nvar CCFW = {\n  gtm: ('; ' + document.cookie).split('; ccfw_gtm_id=').pop().split(';').shift(),\n  gtmID: document.getElementById('ccfw-page-banner').getAttribute('data-gtm-id'),\n  canRun: function canRun(id) {\n    return id.startsWith('GTM') || false;\n  },\n  allowedIds: [],\n  selector: {\n    all: {\n      accept: 'cookie-accept',\n      decline: 'cookie-decline'\n    },\n    moreInfo: 'cookie-more-info',\n    settings: 'js-ccfw-settings-button',\n    toggles: 'ccfw-banner__toggle-slider'\n  },\n  storage: {\n    time: {\n      get: function get() {\n        return JSON.parse(window.localStorage.getItem('ccfw-time'));\n      },\n      set: function set() {\n        return window.localStorage.setItem('ccfw-time', JSON.stringify(new Date(new Date().setFullYear(new Date().getFullYear() + 1)).getTime()));\n      }\n    },\n    allowed: {\n      get: function get() {\n        return JSON.parse(window.localStorage.getItem('ccfw-gtm-allowed'));\n      },\n      set: function set(value) {\n        return window.localStorage.setItem('ccfw-gtm-allowed', JSON.stringify(value));\n      }\n    },\n    bannerHidden: {\n      get: function get() {\n        return JSON.parse(window.localStorage.getItem('ccfw-banner-hidden'));\n      },\n      set: function set(value) {\n        return window.localStorage.setItem('ccfw-banner-hidden', JSON.stringify(value));\n      }\n    },\n    clear: function clear(key) {\n      return window.localStorage.removeItem(key);\n    }\n  },\n  listItem: {\n    set: function set(value) {\n      dataLayer[0]['gtm.allowlist'] = value;\n      /*console.log(dataLayer);*/\n\n      CCFW.storage.allowed.set(value);\n    },\n    clear: function clear(key, value) {\n      dataLayer[0][key].forEach(function (element, index, array) {\n        if (element === value) {\n          array.splice(index, 1);\n        }\n      });\n    }\n  },\n\n  /**\n   * Wrap the dataLayer.push function\n   * @param event\n   * @param object\n   * @private\n   */\n  trackEvent: function trackEvent(event, object) {\n    if (!object) {\n      dataLayer.push({\n        'event': event\n      });\n      return;\n    }\n\n    dataLayer.push(jQuery.extend({}, {\n      'event': event\n    }, object));\n  },\n\n  /**\n   * Determine exactly what element was clicked and return its jQuery equivalent\n   * @param event\n   * @returns {jQuery|HTMLElement}\n   * @private\n   */\n  jqTarget: function jqTarget(event) {\n    return jQuery(event.target);\n  },\n\n  /**\n   * Runs on load\n   */\n  clearStorage: function clearStorage() {\n    var stored = CCFW.storage.time.get(); // always a year from storage\n\n    var now = new Date().getTime();\n\n    if (now > stored) {\n      // a year has past\n      CCFW.storage.clear('ccfw-gtm-allowed');\n      CCFW.storage.clear('ccfw-banner-hidden');\n      CCFW.storage.clear('ccfw-time');\n    }\n  },\n\n  /**\n   * @param remove acknowledges that we are removing all allowed ids\n   */\n  toggleAll: function toggleAll(remove) {\n    var allowList = CCFW.storage.allowed.get() || [];\n\n    if (remove) {\n      allowList = [];\n    }\n\n    jQuery('.' + CCFW.selector.toggles).each(function (key, element) {\n      var allowed = jQuery(element).data('allowlist');\n\n      if (remove) {\n        jQuery(element).attr('aria-checked', false);\n        jQuery('#ccfw-' + allowed + '-toggle-off').removeAttr('aria-hidden').show();\n        jQuery('#ccfw-' + allowed + '-toggle-on').attr('aria-hidden', 'true').hide();\n      } else {\n        if (allowList.indexOf(allowed) === -1) {\n          allowList.push(allowed);\n        }\n\n        jQuery(element).attr('aria-checked', true);\n        jQuery('#ccfw-' + allowed + '-toggle-on').removeAttr('aria-hidden').show();\n        jQuery('#ccfw-' + allowed + '-toggle-off').attr('aria-hidden', 'true').hide();\n      }\n    });\n    return allowList;\n  },\n  manageAll: function manageAll(allowList, allowed, pressed) {\n    if (!allowList) {\n      return;\n    }\n\n    var totalAllowed = jQuery('.' + CCFW.selector.toggles).length - 1;\n\n    if (allowed !== 'all') {\n      if (pressed) {\n        allowList = allowList.filter(function (item) {\n          return item !== 'all';\n        });\n        jQuery('#ccfw-all-toggle-off').removeAttr('aria-hidden').show();\n        jQuery('#ccfw-all-toggle-on').attr('aria-hidden', 'true').hide();\n\n        if (allowList.length === 0) {\n          jQuery('button[data-allowlist=\"all\"]').attr('aria-checked', false);\n        }\n      }\n\n      if (allowList.length > 0) {\n        jQuery('button[data-allowlist=\"all\"]').attr('aria-checked', true);\n      }\n\n      if (totalAllowed === allowList.length) {\n        if (allowList.indexOf('all') === -1) {\n          allowList.push('all');\n        }\n\n        jQuery('#ccfw-all-toggle-on').removeAttr('aria-hidden').show();\n        jQuery('#ccfw-all-toggle-off').attr('aria-hidden', 'true').hide();\n        jQuery('button[data-allowlist=\"all\"]').attr('aria-checked', true);\n      }\n    }\n\n    return allowList;\n  }\n};\n\nvar ccfwGTM = function ccfwGTM() {\n  if (CCFW.canRun(CCFW.gtmID)) {\n    window.dataLayer = []; // INIT\n    // use existing list if present\n    // default to empty array if not\n\n    var allowedList = CCFW.storage.allowed.get() || []; // default to empty array\n\n    var ccfwAlwaysNeeded = ['v', 'e', 'jsm']; // custom events and dataLayer access\n\n    var ccfwTriggers = [];\n    var ccfwVariables = [];\n\n    if (allowedList.indexOf('ua') !== -1) {\n      ccfwTriggers = ccfwTriggers.concat('cl', 'sdl', 'evl', 'jel', 'tl');\n      ccfwVariables = ['c', 'ctv', 'd', 'vis', 'gas', 'f', 'j', 'r', 'u'];\n    }\n\n    allowedList = allowedList.concat(ccfwAlwaysNeeded, ccfwTriggers, ccfwVariables);\n    window.dataLayer = [{\n      'gtm.allowlist': allowedList\n    }]; // Drop GTM code\n\n    (function (w, d, s, l, i) {\n      w[l] = w[l] || [];\n      w[l].push({\n        'gtm.start': new Date().getTime(),\n        event: 'gtm.js'\n      });\n      var f = d.getElementsByTagName(s)[0],\n          j = d.createElement(s),\n          dl = l !== 'dataLayer' ? '&l=' + l : '';\n      j.async = true;\n      j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl;\n      f.parentNode.insertBefore(j, f);\n    })(window, document, 'script', 'dataLayer', CCFW.gtmID);\n\n    return true;\n  } else {\n    console.warn('CCFW GTM:', 'The GTM ID wasn\\'t assigned or, does not exist.');\n    return false;\n  }\n};\n\nvar togglesChange = function togglesChange(e) {\n  e.preventDefault();\n  var toggle = jQuery(this);\n  var allowed = toggle.data('allowlist');\n  var allowList = CCFW.storage.allowed.get() || [];\n  var pressed = toggle.attr('aria-checked') === 'true';\n  toggle.attr('aria-checked', !pressed);\n\n  if (allowed === 'all') {\n    allowList = CCFW.toggleAll(pressed);\n  }\n\n  if (pressed) {\n    allowList = allowList.filter(function (item) {\n      return item !== allowed;\n    });\n    jQuery('#ccfw-' + allowed + '-toggle-off').removeAttr('aria-hidden').show();\n    jQuery('#ccfw-' + allowed + '-toggle-on').attr('aria-hidden', 'true').hide();\n  } else {\n    if (allowList.indexOf(allowed) === -1) {\n      allowList.push(allowed);\n    }\n\n    jQuery('#ccfw-' + allowed + '-toggle-on').removeAttr('aria-hidden').show();\n    jQuery('#ccfw-' + allowed + '-toggle-off').attr('aria-hidden', 'true').hide();\n  }\n\n  allowList = CCFW.manageAll(allowList, allowed, pressed);\n  CCFW.listItem.set(allowList);\n  return false;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/ccfw-gtm.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/ccfw-cookie-manage.js");
/******/ 	
/******/ })()
;