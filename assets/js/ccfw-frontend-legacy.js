/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/ccfw-frontend-legacy.js":
/*!****************************************!*\
  !*** ./src/js/ccfw-frontend-legacy.js ***!
  \****************************************/
/***/ (() => {

eval("(function ($) {\n  'use strict';\n  /**\n   *  Define handlers when you need to maniplate late loading items such as images\n   * */\n  // $(window).on('load', function () {\n  // place code here if you need to manipule a late loading object like images\n  // })\n\n  /**\n   *  Define handlers for when the html/DOM is ready.\n   *  Banner settings use cookies (rather than local storage) to make older browers < IE8 happy\n   * TODO: Target data attributes rather than CSS classes\n   * */\n\n  $(function () {\n    var cookie_key_banner_hidden = 'ccfw_wp_plugin.banner.hidden';\n    var cookie_key_ga_accept = 'ccfw_wp_plugin.ga.accept'; // This is used so much make sure all modules use it to save calls to DOM\n\n    var cacheMainElements = {\n      init: function init() {\n        this.$el = $('#ccfw-page-banner');\n        this.$body = $('body');\n        this.$html = $('html');\n      }\n    };\n    /**\n     *  Helper functions for shared tasks\n     * */\n\n    var utilities = {\n      init: function init() {\n        this.cacheDom();\n        this.bindEvents();\n      },\n      cacheDom: function cacheDom() {\n        this.$el = cacheMainElements.$el;\n        this.$settingsModal = this.$el.find('#cookie-popup');\n        this.$body = cacheMainElements.$body;\n        this.$html = cacheMainElements.$html;\n        this.$cookieSettingsButton = this.$body.find('#js-ccfw-settings-button');\n      },\n      bindEvents: function bindEvents() {\n        this.$cookieSettingsButton.on('click', this.showBanner.bind(this));\n      },\n      getCookie: function getCookie(name) {\n        var value = '; ' + document.cookie;\n        var parts = value.split('; ' + name + '=');\n\n        if (parts.length === 2) {\n          return parts.pop().split(';').shift();\n        }\n      },\n      setCookie: function setCookie(name, value, days) {\n        var d = new Date();\n        d.setTime(d.getTime() + 24 * 60 * 60 * 1000 * days);\n        document.cookie = name + '=' + value + '; path=/; expires=' + d.toGMTString();\n      },\n      deleteCookie: function deleteCookie(name) {\n        document.cookie = name + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n      },\n      checkForCookie: function checkForCookie(key) {\n        var cookie = this.getCookie(key);\n        var bool = cookie === undefined ? false : true;\n        return bool;\n      },\n      showBanner: function showBanner() {\n        this.$el.show();\n        this.$cookieSettingsButton.hide();\n        this.toggleAriaHidden(this.$el, \"hide\");\n      },\n      hideBanner: function hideBanner() {\n        this.$el.hide();\n        this.toggleAriaHidden(this.$el, \"unhide\");\n        this.$cookieSettingsButton.show();\n      },\n      hideSettingsModal: function hideSettingsModal() {\n        this.$settingsModal.hide();\n        this.$body.removeClass(\"ccfw-modal-open\");\n        this.$el.removeClass(\"ccfw-cookie-banner-open\");\n        this.$html.removeClass(\"ccfw-cookie-banner-open\");\n        this.$body.removeClass(\"ccfw-cookie-banner-open\");\n      },\n      showSettingsModal: function showSettingsModal() {\n        this.$settingsModal.show();\n        this.$body.addClass(\"ccfw-modal-open\");\n        this.$el.addClass(\"ccfw-cookie-banner-open\");\n        this.$html.addClass(\"ccfw-cookie-banner-open\");\n        this.$body.addClass(\"ccfw-cookie-banner-open\");\n\n        if (utilities.checkForCookie(cookie_key_ga_accept)) {\n          settingsModal.$GAcheckBox.attr(\"aria-checked\", true);\n        }\n\n        settingsModal.trapSettingsFocus();\n        var pressed = settingsModal.$GAcheckBox.attr(\"aria-checked\") === \"true\";\n\n        if (pressed) {\n          settingsModal.$gaToggleOnText.show();\n          settingsModal.$gaToggleOffText.hide();\n        } else {\n          settingsModal.$gaToggleOffText.show();\n          settingsModal.$gaToggleOnText.hide();\n        }\n      },\n      toggleAriaHidden: function toggleAriaHidden(elem, state) {\n        var siblings = [];\n        var sibling = elem.parent().children();\n\n        while (sibling) {\n          if (sibling !== elem) {\n            siblings.push(sibling);\n          }\n\n          sibling = sibling.nextSibling;\n        }\n\n        if (state === \"hide\") {\n          siblings.forEach(function (sibling) {\n            sibling.attr(\"aria-hidden\", \"true\");\n            elem.removeAttr(\"aria-hidden\", \"true\");\n          });\n        } else {\n          siblings.forEach(function (sibling) {\n            sibling.removeAttr(\"aria-hidden\", \"true\");\n          });\n        }\n      }\n    };\n    /**\n     *  Banner management and control\n     * */\n\n    var banner = {\n      init: function init() {\n        this.cacheDom();\n        this.bindEvents();\n        this.bannerDisplay();\n      },\n      cacheDom: function cacheDom() {\n        this.$el = cacheMainElements.$el;\n        this.$buttonAccept = this.$el.find('#cookie-accept');\n        this.$buttonDecline = this.$el.find('#cookie-decline');\n        this.$buttonInfo = this.$el.find('#cookie-more-info');\n      },\n      bindEvents: function bindEvents() {\n        this.$buttonAccept.on('click', this.acceptAllButton.bind(this));\n        this.$buttonDecline.on('click', this.declineAllButton.bind(this));\n        this.$buttonInfo.on('click', this.chooseCookieSettingsButton.bind(this));\n      },\n      bannerDisplay: function bannerDisplay() {\n        if (utilities.checkForCookie(cookie_key_banner_hidden) === false) {\n          utilities.showBanner();\n          this.trapBannerFocus();\n        } else {\n          utilities.hideBanner();\n        }\n      },\n      trapBannerFocus: function trapBannerFocus() {\n        var cookieBannerButtons = $('.ccfw-banner__buttons');\n        var focusableEls = $('.ccfw-banner__buttons #cookie-accept, .ccfw-banner__buttons #cookie-decline, .ccfw-banner__buttons #cookie-more-info');\n        var firstFocusableEl = focusableEls[0];\n        var lastFocusableEl = focusableEls[focusableEls.length - 1];\n        cookieBannerButtons.on('keydown', function (e) {\n          var isTabPressed = e.key === 'Tab';\n\n          if (!isTabPressed) {\n            return;\n          }\n\n          if (e.shiftKey)\n            /* shift + tab */\n            {\n              if (document.activeElement === firstFocusableEl) {\n                lastFocusableEl.focus();\n                e.preventDefault();\n              }\n            } else\n            /* tab */\n            {\n              if (document.activeElement === lastFocusableEl) {\n                firstFocusableEl.focus();\n                e.preventDefault();\n              }\n            }\n        });\n      },\n      acceptAllButton: function acceptAllButton() {\n        utilities.setCookie(cookie_key_banner_hidden, 'true', 365);\n        utilities.setCookie(cookie_key_ga_accept, 'true', 365);\n        utilities.hideBanner();\n      },\n      declineAllButton: function declineAllButton() {\n        utilities.setCookie(cookie_key_banner_hidden, 'true', 365);\n        utilities.deleteCookie(cookie_key_ga_accept);\n        utilities.hideBanner();\n      },\n      chooseCookieSettingsButton: function chooseCookieSettingsButton() {\n        utilities.showSettingsModal();\n      }\n    };\n    var settingsModal = {\n      init: function init() {\n        this.cacheDom();\n        this.bindEvents();\n      },\n      cacheDom: function cacheDom() {\n        this.$el = cacheMainElements.$el;\n        this.$settingsModal = this.$el.find('#cookie-popup');\n        this.$buttonAccept = this.$settingsModal.find('#cookie-accept');\n        this.$buttonDecline = this.$settingsModal.find('#cookie-decline');\n        this.$buttonInfo = this.$settingsModal.find('#cookie-more-info');\n        this.$buttonSavePreferences = this.$settingsModal.find('#cookie-save-preferences');\n        this.$GAcheckBox = this.$settingsModal.find('#ccfw-analytics-cookies-toggle');\n        this.$buttonModalClose = this.$settingsModal.find('#ccfw-modal-close');\n        this.$body = cacheMainElements.$body;\n        this.$gaToggleOnText = this.$settingsModal.find('#ccfw-ga-toggle-on');\n        this.$gaToggleOffText = this.$settingsModal.find('#ccfw-ga-toggle-off');\n      },\n      bindEvents: function bindEvents() {\n        this.$buttonModalClose.on('click', this.modalDisplay.bind(this));\n        this.$buttonInfo.on('click', this.trapSettingsFocus.bind(this));\n        this.$buttonSavePreferences.on('click', this.saveCookiePreferences.bind(this));\n        this.$GAcheckBox.on('click', this.toggleAriaPressed.bind(this));\n      },\n      modalDisplay: function modalDisplay() {\n        utilities.hideSettingsModal();\n      },\n      toggleAriaPressed: function toggleAriaPressed() {\n        var pressed = this.$GAcheckBox.attr(\"aria-checked\") === \"true\";\n        this.$GAcheckBox.attr(\"aria-checked\", !pressed);\n\n        if (!pressed) {\n          this.$gaToggleOnText.show();\n          this.$gaToggleOffText.hide();\n        } else {\n          this.$gaToggleOffText.show();\n          this.$gaToggleOnText.hide();\n        }\n      },\n      trapSettingsFocus: function trapSettingsFocus() {\n        this.$settingsModal.focus();\n        /*Trap focus */\n\n        /* Based on Hidde de Vries' solution: https://hiddedevries.nl/en/blog/2017-01-29-using-javascript-to-trap-focus-in-an-element */\n\n        var focusableEls = $('#cookie-popup a[href], #cookie-popup details, #cookie-popup button, #cookie-popup input[type=\"checkbox\"]');\n        var firstFocusableEl = focusableEls[0];\n        var lastFocusableEl = focusableEls[focusableEls.length - 1];\n        this.$el.on('keydown', function (e) {\n          // Close banner if user presses escape key\n          if (e.key === 'Escape') {\n            utilities.hideSettingsModal();\n          }\n\n          var isTabPressed = e.key === 'Tab';\n\n          if (!isTabPressed) {\n            return;\n          }\n\n          if (e.shiftKey)\n            /* shift + tab */\n            {\n              if (document.activeElement === firstFocusableEl) {\n                lastFocusableEl.focus();\n                e.preventDefault();\n              }\n            } else\n            /* tab */\n            {\n              if (document.activeElement === lastFocusableEl) {\n                firstFocusableEl.focus();\n                e.preventDefault();\n              }\n            }\n        });\n      },\n      saveCookiePreferences: function saveCookiePreferences() {\n        var analyticsCookiesTurnedOn = this.$GAcheckBox.attr(\"aria-checked\") === \"true\";\n\n        if (analyticsCookiesTurnedOn === true) {\n          utilities.setCookie(cookie_key_ga_accept, 'true', 365);\n        }\n\n        if (analyticsCookiesTurnedOn === false) {\n          // GA - If present remove GA cookie, otherwise do nothing, default is GA off\n          if (utilities.checkForCookie(cookie_key_ga_accept)) {\n            utilities.deleteCookie(cookie_key_ga_accept);\n          }\n        }\n\n        utilities.setCookie(cookie_key_banner_hidden, 'true', 365);\n        utilities.hideBanner();\n        utilities.hideSettingsModal();\n      }\n    };\n    cacheMainElements.init();\n    utilities.init();\n    banner.init();\n    settingsModal.init();\n  });\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/ccfw-frontend-legacy.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/ccfw-frontend-legacy.js"]();
/******/ 	
/******/ })()
;