/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/ie11CustomProperties.js":
/*!****************************************!*\
  !*** ./src/js/ie11CustomProperties.js ***!
  \****************************************/
/***/ (() => {

eval("/*! ie11CustomProperties.js v3.0.6 | MIT License | https://git.io/fjXMN */\n!function () {\n  'use strict'; // check for support\n\n  var testEl = document.createElement('i');\n  testEl.style.setProperty('--x', 'y');\n\n  if (testEl.style.getPropertyValue('--x') === 'y' || !testEl.msMatchesSelector) {\n    return;\n  }\n\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.msMatchesSelector;\n  }\n\n  var listeners = [],\n      root = document,\n      Observer;\n\n  function qsa(el, selector) {\n    try {\n      return el.querySelectorAll(selector);\n    } catch (e) {\n      // console.warn('the Selector '+selector+' can not be parsed');\n      return [];\n    }\n  }\n\n  function onElement(selector, callback) {\n    var listener = {\n      selector: selector,\n      callback: callback,\n      elements: new WeakMap()\n    };\n    var els = qsa(root, listener.selector),\n        i = 0,\n        el;\n\n    while (el = els[i++]) {\n      listener.elements.set(el, true);\n      listener.callback.call(el, el);\n    }\n\n    listeners.push(listener);\n\n    if (!Observer) {\n      Observer = new MutationObserver(checkMutations);\n      Observer.observe(root, {\n        childList: true,\n        subtree: true\n      });\n    }\n\n    checkListener(listener);\n  }\n\n  function checkListener(listener, target) {\n    var i = 0,\n        el,\n        els = [];\n\n    try {\n      target && target.matches(listener.selector) && els.push(target);\n    } catch (e) {}\n\n    if (loaded) {\n      // ok? check inside node on innerHTML - only when loaded\n      Array.prototype.push.apply(els, qsa(target || root, listener.selector));\n    }\n\n    while (el = els[i++]) {\n      if (listener.elements.has(el)) continue;\n      listener.elements.set(el, true);\n      listener.callback.call(el, el);\n    }\n  }\n\n  function checkListeners(inside) {\n    var i = 0,\n        listener;\n\n    while (listener = listeners[i++]) {\n      checkListener(listener, inside);\n    }\n  }\n\n  function checkMutations(mutations) {\n    var j = 0,\n        i,\n        mutation,\n        nodes,\n        target;\n\n    while (mutation = mutations[j++]) {\n      nodes = mutation.addedNodes, i = 0;\n\n      while (target = nodes[i++]) {\n        target.nodeType === 1 && checkListeners(target);\n      }\n    }\n  }\n\n  var loaded = false;\n  document.addEventListener('DOMContentLoaded', function () {\n    loaded = true;\n  }); // svg polyfills\n\n  function copyProperty(prop, from, to) {\n    var desc = Object.getOwnPropertyDescriptor(from, prop);\n    Object.defineProperty(to, prop, desc);\n  }\n\n  if (!('classList' in Element.prototype)) {\n    copyProperty('classList', HTMLElement.prototype, Element.prototype);\n  }\n\n  if (!('innerHTML' in Element.prototype)) {\n    copyProperty('innerHTML', HTMLElement.prototype, Element.prototype);\n  }\n\n  if (!('sheet' in SVGStyleElement.prototype)) {\n    Object.defineProperty(SVGStyleElement.prototype, 'sheet', {\n      get: function get() {\n        var all = document.styleSheets,\n            i = 0,\n            sheet;\n\n        while (sheet = all[i++]) {\n          if (sheet.ownerNode === this) return sheet;\n        }\n      }\n    });\n  } // main logic\n  // cached regexps, better performance\n\n\n  var regFindSetters = /([\\s{;])(--([A-Za-z0-9-_]*)\\s*:([^;!}{]+)(!important)?)(?=\\s*([;}]|$))/g;\n  var regFindGetters = /([{;]\\s*)([A-Za-z0-9-_]+\\s*:[^;}{]*var\\([^!;}{]+)(!important)?(?=\\s*([;}$]|$))/g;\n  var regRuleIEGetters = /-ieVar-([^:]+):/g;\n  var regRuleIESetters = /-ie-([^};]+)/g; //const regHasVar = /var\\(/;\n\n  var regPseudos = /:(hover|active|focus|target|:before|:after|:first-letter|:first-line)/;\n  onElement('link[rel=\"stylesheet\"]', function (el) {\n    fetchCss(el.href, function (css) {\n      var newCss = rewriteCss(css);\n      if (css === newCss) return;\n      newCss = relToAbs(el.href, newCss);\n      el.disabled = true;\n      var style = document.createElement('style');\n      if (el.media) style.setAttribute('media', el.media);\n      el.parentNode.insertBefore(style, el);\n      activateStyleElement(style, newCss);\n    });\n  });\n\n  function foundStyle(el) {\n    if (el.ieCP_polyfilled || el.ieCP_elementSheet) {\n      return;\n    }\n\n    var newCss = rewriteCss(el.innerHTML);\n\n    if (el.innerHTML === newCss) {\n      return;\n    }\n\n    activateStyleElement(el, newCss);\n  }\n\n  onElement('style', foundStyle); // immediate, to pass w3c-tests, bud its a bad idea\n  // addEventListener('DOMNodeInserted',function(e){ e.target.tagName === 'STYLE' && foundStyle(e.target); });\n\n  onElement('[ie-style]', function (el) {\n    var newCss = rewriteCss('{' + el.getAttribute('ie-style')).substr(1);\n    el.style.cssText += ';' + newCss;\n    var found = parseRewrittenStyle(el.style);\n\n    if (found.getters) {\n      addGetterElement(el, found.getters, '%styleAttr');\n    }\n\n    if (found.setters) {\n      addSetterElement(el, found.setters);\n    }\n  });\n\n  function relToAbs(base, css) {\n    return css.replace(/url\\(([^)]+)\\)/g, function ($0, $1) {\n      $1 = $1.trim().replace(/(^['\"]|['\"]$)/g, '');\n      if ($1.match(/^([a-z]+:|\\/)/)) return $0;\n      base = base.replace(/\\?.*/, '');\n      return 'url(' + base + './../' + $1 + ')';\n    });\n  } // ie has a bug, where unknown properties at pseudo-selectors are computed at the element\n  // #el::after { -content:'x'; } => getComputedStyle(el)['-content'] == 'x'\n  // should we add something like -ieVar-pseudo_after-content:'x'?\n\n\n  function rewriteCss(css) {\n    /* uncomment if spec finished and needed by someone\n    css = css.replace(/@property ([^{]+){([^}]+)}/, function($0, prop, body){\n    \tprop = prop.trim();\n    \tconst declaration = {name:prop};\n    \tbody.split(';').forEach(function(pair){\n    \t\tconst x = pair.split(':');\n    \t\tif (x[1]) declaration[ x[0].trim() ] = x[1];\n    \t});\n    \tdeclaration['inherits'] = declaration['inherits'].trim()==='true' ? true : false;\n    \tdeclaration['initialValue'] = declaration['initial-value'];\n    \tCSS.registerProperty(declaration)\n    \treturn '/*\\n @property ... removed \\n*'+'/';\n    });\n    */\n    return css.replace(regFindSetters, function ($0, $1, $2, $3, $4, important) {\n      return $1 + '-ie-' + (important ? '❗' : '') + $3 + ':' + encodeValue($4);\n    }).replace(regFindGetters, function ($0, $1, $2, important) {\n      return $1 + '-ieVar-' + (important ? '❗' : '') + $2 + '; ' + $2; // keep the original, so chaining works \"--x:var(--y)\"\n    });\n  }\n\n  function encodeValue(value) {\n    return value; //return value.replace(/ /g,'␣');\n  } //const keywords = {initial:1,inherit:1,revert:1,unset:1};\n\n\n  function decodeValue(value) {\n    return value;\n    /*if (value===undefined) return;\n    value =  value.replace(/␣/g,' ');\n    const trimmed = value.trim();\n    if (keywords[trimmed]) return trimmed;\n    return value;*/\n  } // beta\n\n\n  var styles_of_getter_properties = {};\n\n  function parseRewrittenStyle(style) {\n    // less memory then parameter cssText?\n    // beta\n    style['z-index']; // ie11 can access unknown properties in stylesheets only if accessed a dashed known property\n\n    var getters = []; // eg. [border,color]\n\n    var setters = {}; // eg. [--color:#fff, --padding:10px];\n\n    var cssText = style.cssText;\n    var matchesGetters = cssText.match(regRuleIEGetters),\n        j,\n        match;\n\n    if (matchesGetters) {\n      for (j = 0; match = matchesGetters[j++];) {\n        var propName = match.slice(7, -1);\n\n        if (propName[0] === '!') {\n          propName = propName.substr(1);\n        }\n\n        getters.push(propName); // beta\n\n        if (!styles_of_getter_properties[propName]) {\n          styles_of_getter_properties[propName] = [];\n        }\n\n        styles_of_getter_properties[propName].push(style);\n      }\n    }\n\n    var matchesSetters = cssText.match(regRuleIESetters);\n\n    if (matchesSetters) {\n      for (j = 0; match = matchesSetters[j++];) {\n        var x = match.substr(4).split(':');\n        var _propName = x[0];\n        var propValue = x[1];\n\n        if (_propName[0] === '!') {\n          _propName = _propName.substr(1);\n        }\n\n        setters[_propName] = propValue;\n      }\n    }\n\n    return {\n      getters: getters,\n      setters: setters\n    };\n  }\n\n  function activateStyleElement(style, css) {\n    style.innerHTML = css;\n    style.ieCP_polyfilled = true;\n    var rules = style.sheet.rules,\n        i = 0,\n        rule; // cssRules = CSSRuleList, rules = MSCSSRuleList\n\n    while (rule = rules[i++]) {\n      var found = parseRewrittenStyle(rule.style);\n\n      if (found.getters) {\n        addGettersSelector(rule.selectorText, found.getters);\n      }\n\n      if (found.setters) {\n        addSettersSelector(rule.selectorText, found.setters);\n      } // mediaQueries: redraw the hole document\n      // better add events for each element?\n\n\n      var media = rule.parentRule && rule.parentRule.media && rule.parentRule.media.mediaText;\n\n      if (media && (found.getters || found.setters)) {\n        matchMedia(media).addListener(function () {\n          drawTree(document.documentElement);\n        });\n      }\n    } // beta\n\n\n    redrawStyleSheets();\n  }\n\n  function addGettersSelector(selector, properties) {\n    selectorAddPseudoListeners(selector);\n    onElement(unPseudo(selector), function (el) {\n      addGetterElement(el, properties, selector);\n      drawElement(el);\n    });\n  }\n\n  function addGetterElement(el, properties, selector) {\n    var i = 0,\n        prop,\n        j;\n    var selectors = selector.split(','); // split grouped selectors\n\n    el.setAttribute('iecp-needed', true);\n\n    if (!el.ieCPSelectors) {\n      el.ieCPSelectors = {};\n    }\n\n    while (prop = properties[i++]) {\n      for (j = 0; selector = selectors[j++];) {\n        var parts = selector.trim().split('::');\n        if (!el.ieCPSelectors[prop]) el.ieCPSelectors[prop] = [];\n        el.ieCPSelectors[prop].push({\n          selector: parts[0],\n          pseudo: parts[1] ? '::' + parts[1] : ''\n        });\n      }\n    }\n  }\n\n  function addSettersSelector(selector, propVals) {\n    selectorAddPseudoListeners(selector);\n    onElement(unPseudo(selector), function (el) {\n      addSetterElement(el, propVals);\n    });\n  }\n\n  function addSetterElement(el, propVals) {\n    if (!el.ieCP_setters) el.ieCP_setters = {};\n\n    for (var prop in propVals) {\n      // eg. {foo:#fff, bar:baz}\n      el.ieCP_setters['--' + prop] = 1;\n    }\n\n    drawTree(el);\n  } //beta\n\n\n  function redrawStyleSheets() {\n    for (var prop in styles_of_getter_properties) {\n      var styles = styles_of_getter_properties[prop];\n      var ii = 0;\n\n      for (ii, style; style = styles[ii++];) {\n        var value = style['-ieVar-' + prop];\n\n        if (style.owningElement || !value) {\n          continue;\n        }\n\n        value = styleComputeValueWidthVars(getComputedStyle(document.documentElement), value);\n\n        if (value === '') {\n          continue;\n        }\n\n        try {\n          style[prop] = value;\n        } catch (e) {}\n      }\n    }\n  }\n\n  var pseudos = {\n    hover: {\n      on: 'mouseenter',\n      off: 'mouseleave'\n    },\n    focus: {\n      on: 'focusin',\n      off: 'focusout'\n    },\n    active: {\n      on: 'CSSActivate',\n      off: 'CSSDeactivate'\n    }\n  };\n\n  function selectorAddPseudoListeners(selector) {\n    // ie11 has the strange behavoir, that groups of selectors are individual rules, but starting with the full selector:\n    // td, th, button { color:red } results in this rules:\n    // \"td, th, button\" | \"th, th\" | \"th\"\n    selector = selector.split(',')[0];\n\n    for (var pseudo in pseudos) {\n      var parts = selector.split(':' + pseudo);\n\n      if (parts.length > 1) {\n        (function () {\n          var ending = parts[1].match(/^[^\\s]*/); // ending elementpart of selector (used for not(:active))\n\n          var sel = unPseudo(parts[0] + ending);\n          var listeners = pseudos[pseudo];\n          onElement(sel, function (el) {\n            el.addEventListener(listeners.on, drawTreeEvent);\n            el.addEventListener(listeners.off, drawTreeEvent);\n          });\n        })();\n      }\n    }\n  }\n\n  var CSSActive = null;\n  document.addEventListener('mousedown', function (e) {\n    setTimeout(function () {\n      if (e.target === document.activeElement) {\n        var evt = document.createEvent('Event');\n        evt.initEvent('CSSActivate', true, true);\n        CSSActive = e.target;\n        CSSActive.dispatchEvent(evt);\n      }\n    });\n  });\n  document.addEventListener('mouseup', function () {\n    if (CSSActive) {\n      var evt = document.createEvent('Event');\n      evt.initEvent('CSSDeactivate', true, true);\n      CSSActive.dispatchEvent(evt);\n      CSSActive = null;\n    }\n  });\n\n  function unPseudo(selector) {\n    return selector.replace(regPseudos, '').replace(':not()', '');\n  }\n\n  var uniqueCounter = 0;\n  /* old *\n  function _drawElement(el) {\n  \tif (!el.ieCP_unique) { // use el.uniqueNumber? but needs class for the css-selector => test performance\n  \t\tel.ieCP_unique = ++uniqueCounter;\n  \t\tel.classList.add('iecp-u' + el.ieCP_unique);\n  \t}\n  \tlet style = getComputedStyle(el);\n  \tif (el.ieCP_sheet) while (el.ieCP_sheet.rules[0]) el.ieCP_sheet.deleteRule(0);\n  \tfor (let prop in el.ieCPSelectors) {\n  \t\tlet important = style['-ieVar-❗' + prop];\n  \t\tlet valueWithVar = important || style['-ieVar-' + prop];\n  \t\tif (!valueWithVar) continue; // todo, what if '0'\n  \t\t\tlet details = {};\n  \t\tlet value = styleComputeValueWidthVars(style, valueWithVar, details);\n  \t\t\tif (important) value += ' !important';\n  \t\tfor (let i=0, item; item=el.ieCPSelectors[prop][i++];) { // todo: split and use requestAnimationFrame?\n  \t\t\tif (item.selector === '%styleAttr') {\n  \t\t\t\tel.style[prop] = value;\n  \t\t\t} else {\n  \t\t\t\t\t// beta\n  \t\t\t\tif (!important && details.allByRoot !== false) continue; // dont have to draw root-properties\n  \t\t\t\t\t//let selector = item.selector.replace(/>? \\.[^ ]+/, ' ', item.selector); // todo: try to equalize specificity\n  \t\t\t\tlet selector = item.selector;\n  \t\t\t\telementStyleSheet(el).insertRule(selector + '.iecp-u' + el.ieCP_unique + item.pseudo + ' {' + prop + ':' + value + '}', 0);\n  \t\t\t}\n  \t\t}\n  \t}\n  }\n  function elementStyleSheet(el){\n  \tif (!el.ieCP_sheet) {\n  \t\tconst styleEl = document.createElement('style');\n  \t\tstyleEl.ieCP_elementSheet = 1;\n  \t\t//el.appendChild(styleEl); // yes! self-closing tags can have style as children, but - if i set innerHTML, the stylesheet is lost\n  \t\tdocument.head.appendChild(styleEl);\n  \t\tel.ieCP_sheet = styleEl.sheet;\n  \t}\n  \treturn el.ieCP_sheet;\n  }\n  \t/* */\n\n  function _drawElement(el) {\n    if (!el.ieCP_unique) {\n      // use el.uniqueNumber? but needs class for the css-selector => test performance\n      el.ieCP_unique = ++uniqueCounter;\n      el.classList.add('iecp-u' + el.ieCP_unique);\n    }\n\n    var style = getComputedStyle(el);\n    var css = '';\n\n    for (var prop in el.ieCPSelectors) {\n      var important = style['-ieVar-❗' + prop];\n      var valueWithVar = important || style['-ieVar-' + prop];\n      if (!valueWithVar) continue; // todo, what if '0'\n\n      var details = {};\n      var value = styleComputeValueWidthVars(style, valueWithVar, details); //if (value==='initial') value = initials[prop];\n\n      if (important) value += ' !important';\n\n      for (var i = 0, item; item = el.ieCPSelectors[prop][i++];) {\n        // todo: split and use requestAnimationFrame?\n        if (item.selector === '%styleAttr') {\n          el.style[prop] = value;\n        } else {\n          // beta\n          if (!important && details.allByRoot !== false) continue; // dont have to draw root-properties\n          //let selector = item.selector.replace(/>? \\.[^ ]+/, ' ', item.selector); // todo: try to equalize specificity\n\n          var selector = item.selector;\n          css += selector + '.iecp-u' + el.ieCP_unique + item.pseudo + '{' + prop + ':' + value + '}\\n';\n        }\n      }\n    }\n\n    elementSetCss(el, css);\n  }\n\n  function elementSetCss(el, css) {\n    if (!el.ieCP_styleEl && css) {\n      var styleEl = document.createElement('style');\n      styleEl.ieCP_elementSheet = 1; //el.appendChild(styleEl); // yes! self-closing tags can have style as children, but - if i set innerHTML, the stylesheet is lost\n\n      document.head.appendChild(styleEl);\n      el.ieCP_styleEl = styleEl;\n    }\n\n    if (el.ieCP_styleEl) el.ieCP_styleEl.innerHTML = css;\n  }\n  /* */\n\n\n  function drawTree(target) {\n    if (!target) return;\n    var els = target.querySelectorAll('[iecp-needed]');\n    if (target.hasAttribute && target.hasAttribute('iecp-needed')) drawElement(target); // self\n\n    for (var i = 0, el; el = els[i++];) {\n      drawElement(el);\n    } // tree\n\n  } // draw queue\n\n\n  var drawQueue = new Set();\n  var collecting = false;\n  var drawing = false;\n\n  function drawElement(el) {\n    drawQueue.add(el);\n    if (collecting) return;\n    collecting = true;\n    requestAnimationFrame(function () {\n      //setImmediate(function(){\n      collecting = false;\n      drawing = true;\n      drawQueue.forEach(_drawElement);\n      drawQueue.clear();\n      setTimeout(function () {\n        // mutationObserver will trigger delayed, requestAnimationFrame will miss some changes\n        drawing = false;\n      });\n    });\n  }\n\n  function drawTreeEvent(e) {\n    drawTree(e.target);\n  }\n\n  function findVars(str, cb) {\n    // css value parser\n    var level = 0,\n        openedLevel = null,\n        lastPoint = 0,\n        newStr = '',\n        i = 0,\n        _char,\n        insideCalc;\n\n    while (_char = str[i++]) {\n      if (_char === '(') {\n        ++level;\n\n        if (openedLevel === null && str[i - 4] + str[i - 3] + str[i - 2] === 'var') {\n          openedLevel = level;\n          newStr += str.substring(lastPoint, i - 4);\n          lastPoint = i;\n        }\n\n        if (str[i - 5] + str[i - 4] + str[i - 3] + str[i - 2] === 'calc') {\n          insideCalc = level;\n        }\n      }\n\n      if (_char === ')' && openedLevel === level) {\n        var variable = str.substring(lastPoint, i - 1).trim(),\n            fallback = void 0;\n        var x = variable.indexOf(',');\n\n        if (x !== -1) {\n          fallback = variable.slice(x + 1);\n          variable = variable.slice(0, x);\n        }\n\n        newStr += cb(variable, fallback, insideCalc);\n        lastPoint = i;\n        openedLevel = null;\n      }\n\n      if (_char === ')') {\n        --level;\n        if (insideCalc === level) insideCalc = null;\n      }\n    }\n\n    newStr += str.substring(lastPoint);\n    return newStr;\n  }\n\n  function styleComputeValueWidthVars(style, valueWithVars, details) {\n    return findVars(valueWithVars, function (variable, fallback, insideCalc) {\n      var value = style.getPropertyValue(variable);\n      if (insideCalc) value = value.replace(/^calc\\(/, '('); // prevent nested calc\n\n      if (details && style.lastPropertyServedBy !== document.documentElement) details.allByRoot = false;\n      if (value === '' && fallback) value = styleComputeValueWidthVars(style, fallback, details);\n      return value;\n    });\n  } // mutation listener\n\n\n  var observer = new MutationObserver(function (mutations) {\n    if (drawing) return;\n\n    for (var i = 0, mutation; mutation = mutations[i++];) {\n      if (mutation.attributeName === 'iecp-needed') continue; // why?\n      // recheck all selectors if it targets new elements?\n\n      drawTree(mutation.target);\n    }\n  });\n  setTimeout(function () {\n    observer.observe(document, {\n      attributes: true,\n      subtree: true\n    });\n  }); // :target listener\n\n  var oldHash = location.hash;\n  addEventListener('hashchange', function (e) {\n    var newEl = document.getElementById(location.hash.substr(1));\n\n    if (newEl) {\n      var oldEl = document.getElementById(oldHash.substr(1));\n      drawTree(newEl);\n      drawTree(oldEl);\n    } else {\n      drawTree(document);\n    }\n\n    oldHash = location.hash;\n  }); // add owningElement to Element.style\n\n  var descriptor = Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'style');\n  var styleGetter = descriptor.get;\n\n  descriptor.get = function () {\n    var style = styleGetter.call(this);\n    style.owningElement = this;\n    return style;\n  };\n\n  Object.defineProperty(HTMLElement.prototype, 'style', descriptor); // add computedFor to computed style-objects\n\n  var originalGetComputed = getComputedStyle;\n\n  window.getComputedStyle = function (el) {\n    var style = originalGetComputed.apply(this, arguments);\n    style.computedFor = el; //style.pseudoElt = pseudoElt; //not needed at the moment\n\n    return style;\n  }; // getPropertyValue / setProperty hooks\n\n\n  var StyleProto = CSSStyleDeclaration.prototype;\n  var oldGetP = StyleProto.getPropertyValue;\n\n  StyleProto.getPropertyValue = function (property) {\n    this.lastPropertyServedBy = false;\n    property = property.trim();\n    /* *\n    if (this.owningElement) {\n    \tconst ieProperty = '-ieVar-'+property;\n    \tconst iePropertyImportant = '-ieVar-❗'+property;\n    \tlet value = this[iePropertyImportant] || this[ieProperty];\n    \tif (value !== undefined) {\n    \t\t// todo, test if syntax valid\n    \t\treturn value;\n    \t}\n    }\n    /* */\n\n    if (property[0] !== '-' || property[1] !== '-') return oldGetP.apply(this, arguments);\n    var undashed = property.substr(2);\n    var ieProperty = '-ie-' + undashed;\n    var iePropertyImportant = '-ie-❗' + undashed;\n    var value = decodeValue(this[iePropertyImportant] || this[ieProperty]);\n\n    if (this.computedFor) {\n      // computedStyle\n      if (value !== undefined && !inheritingKeywords[value]) {\n        //if (regHasVar.test(value))  // todo: to i need this check?!!! i think its faster without\n        value = styleComputeValueWidthVars(this, value);\n        this.lastPropertyServedBy = this.computedFor;\n      } else {\n        // inherited\n        if (inheritingKeywords[value] || !register[property] || register[property].inherits) {\n          //let el = this.pseudoElt ? this.computedFor : this.computedFor.parentNode;\n          var el = this.computedFor.parentNode;\n\n          while (el.nodeType === 1) {\n            // how slower would it be to getComputedStyle for every element, not just with defined ieCP_setters\n            if (el.ieCP_setters && el.ieCP_setters[property]) {\n              // i could make\n              // value = el.nodeType ? getComputedStyle(this.computedFor.parentNode).getPropertyValue(property)\n              // but i fear performance, stupid?\n              var _style = getComputedStyle(el);\n\n              var tmpVal = decodeValue(_style[iePropertyImportant] || _style[ieProperty]);\n\n              if (tmpVal !== undefined) {\n                // calculated style from current element not from the element the value was inherited from! (style, value)\n                //value = tmpVal; if (regHasVar.test(tmpVal))  // todo: to i need this check?!!! i think its faster without\n                value = styleComputeValueWidthVars(this, tmpVal);\n                this.lastPropertyServedBy = el;\n                break;\n              }\n            }\n\n            el = el.parentNode;\n          }\n        }\n      }\n\n      if (value === 'initial') return '';\n    } //if ((value === undefined || value === 'initial') && register[property]) value = register[property].initialValue; // todo?\n\n\n    if (value === undefined && register[property]) value = register[property].initialValue;\n    if (value === undefined) return '';\n    return value;\n  };\n\n  var inheritingKeywords = {\n    inherit: 1,\n    revert: 1,\n    unset: 1\n  };\n  var oldSetP = StyleProto.setProperty;\n\n  StyleProto.setProperty = function (property, value, prio) {\n    if (property[0] !== '-' || property[1] !== '-') return oldSetP.apply(this, arguments);\n    var el = this.owningElement;\n\n    if (el) {\n      if (!el.ieCP_setters) el.ieCP_setters = {};\n      el.ieCP_setters[property] = 1;\n    }\n\n    property = '-ie-' + (prio === 'important' ? '❗' : '') + property.substr(2);\n    this.cssText += '; ' + property + ':' + encodeValue(value) + ';'; //this[property] = value;\n\n    el === document.documentElement && redrawStyleSheets();\n    el && drawTree(el); // its delayed internal\n  };\n  /*\n  let descriptor = Object.getOwnPropertyDescriptor(StyleProto, 'cssText');\n  let cssTextGetter = descriptor.get;\n  let cssTextSetter = descriptor.set;\n  // descriptor.get = function () {\n  // \tconst style = styleGetter.call(this);\n  // \tstyle.owningElement = this;\n  // \treturn style;\n  // }\n  descriptor.set = function (css) {\n  \tlet el = this.owningElement;\n  \tif (el) {\n  \t\tcss = rewriteCss('{'+css).substr(1);\n  \t\tcssTextSetter.call(this, css);\n  \t\tlet found = parseRewrittenStyle(this);\n  \t\tif (found.getters) addGetterElement(el, found.getters, '%styleAttr');\n  \t\tif (found.setters) addSetterElement(el, found.setters);\n  \t\treturn;\n  \t}\n  \treturn cssTextSetter.call(this, css);\n  }\n  Object.defineProperty(StyleProto, 'cssText', descriptor);\n  */\n\n\n  if (!window.CSS) window.CSS = {};\n  var register = {};\n\n  CSS.registerProperty = function (options) {\n    register[options.name] = options;\n  }; // fix \"initial\" keyword with generated custom properties, this is not supported ad all by ie, should i make a separate \"inherit\"-polyfill?\n\n  /*\n  const computed = getComputedStyle(document.documentElement)\n  const initials = {};\n  for (let i in computed) {\n  \tinitials[i.replace(/([A-Z])/, function(x){ return '-'+x.toLowerCase(x) })] = computed[i];\n  }\n  initials['display'] = 'inline';\n  */\n  // utils\n\n\n  function fetchCss(url, callback) {\n    var request = new XMLHttpRequest();\n    request.open('GET', url);\n    request.overrideMimeType('text/css');\n\n    request.onload = function () {\n      if (request.status >= 200 && request.status < 400) {\n        callback(request.responseText);\n      }\n    };\n\n    request.send();\n  }\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/ie11CustomProperties.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/ie11CustomProperties.js"]();
/******/ 	
/******/ })()
;